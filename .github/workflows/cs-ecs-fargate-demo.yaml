name: CrowdStrike ECS Fargate Demo

on:
  ## scheduled job at 5:30 UTC every sunday
  # schedule:
  #   - cron: '30 5 * * 0'
  ## manual trigger
  workflow_dispatch
  ## on push
  # push:
  #   branches: [ main ]

permissions:
      id-token: write
      contents: read

jobs:
  crowdstrike-ecs-fargate-demo:
    runs-on: ubuntu-latest

    env:
      #The registry where the images are stored
      ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID}}.dkr.ecr.us-east-1.amazonaws.com
      #Update: Location of Crowdstrike sensor that patches task. 
      FALCON_IMAGE: mckenzie-images:7.02.0-4301.container.x86_64.Release.US-2
      #Update: Location of app images that will be deployed to ECS Fargate
      ECR_REPO: mckenzie-images
      GITHUB_SHA: ${{ github.sha }}

    steps:
    #Copies everything in this repository to the ubuntu container running the workflow
    - name: Checkout
      uses: actions/checkout@v3

    - name: Docker build & tag image
    #Builds a container image and tags it with a github SHA and with latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPO:$GITHUB_SHA -t $ECR_REGISTRY/$ECR_REPO:latest .

    - name: Scan Container Image with CrowdStrike
      uses: CrowdStrike/container-image-scan-action@v1
      with:
        container_repository: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}
        container_tag: ${{ env.GITHUB_SHA }}
        crowdstrike_region: us-2
        crowdstrike_score: 5000
        retry_count: 30
      env:
        FALCON_CLIENT_SECRET: ${{ secrets.FALCON_CLIENT_SECRET }}
        FALCON_CLIENT_ID: ${{ secrets.FALCON_CLIENT_ID }}
        JSON_REPORT: /tmp/report.json

    - name: Print CrowdStrike Full Image Scan Report
      if: always()
      run: |
        jq '.' /tmp/report.json

    # - name: Configure AWS credentials
    #   uses: aws-actions/configure-aws-credentials@v2
    #   with:
    #     role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID}}:role/${{ secrets.ROLE_NAME }}
    #     role-session-name: ${{ secrets.ROLE_NAME }}
    #     aws-region: us-east-1

    # - name: ECR Login
    #   uses: aws-actions/amazon-ecr-login@v1  
  
    # - name: Push image to AWS ECR
    #   run: |
    #     docker push $ECR_REGISTRY/$ECR_REPO:latest

    # - name: Pull CrowdStrike Falcon Container Image
    #   run: |
    #     docker pull $ECR_REGISTRY/$FALCON_IMAGE

    # # Patch ECS Task Definition Format (sed used to prevent commiting AWS Account ID)
    # - name: Patch ECS Task Defintion with CrowdStrike Falcon ECS Patching utility
    #   run: |
    #     sed -i 's/#AWSACCOUNTID#/${{ secrets.AWS_ACCOUNT_ID }}/g' taskdefinition.json
    #     docker run \
    #     --mount type=bind,source=$(pwd)/taskdefinition.json,target=/root/taskdefinition.json \
    #     --rm $ECR_REGISTRY/$FALCON_IMAGE \
    #     -cid ${{ secrets.FALCON_CID }} \
    #     -image $ECR_REGISTRY/$FALCON_IMAGE \
    #     -pulltoken $(echo "{\"auths\":{\"${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com\":{\"auth\":\"$(echo AWS:$(aws ecr get-login-password)|base64 -w 0)\"}}}" | base64 -w 0) \
    #     -ecs-spec-file /root/taskdefinition.json > taskdefinitionwithfalcon.json
    #     cat taskdefinitionwithfalcon.json

    # - name: Upload CrowdStrike Falcon Patched ECS Task Definition to ECS
    #   run: |
    #     aws ecs register-task-definition --cli-input-json file://taskdefinitionwithfalcon.json 1>/dev/null
    
    # Patch CloudFormation Format Sample using Parameters for Image URI (Requires Falcon Container 6.53+)
    # - name: Patch CloudFormation with CrowdStrike Falcon ECS Patching utility
    #   run: |
    #     docker run \
    #     --mount type=bind,source=$(pwd)/cloudformation.yaml,target=/root/cloudformation.yaml \
    #     --rm $ECR_REGISTRY/$FALCON_IMAGE \
    #     -cid ${{ secrets.FALCON_CID }} \
    #     -image $ECR_REGISTRY/$FALCON_IMAGE \
    #     -pulltoken $(echo "{\"auths\":{\"${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com\":{\"auth\":\"$(echo AWS:$(aws ecr get-login-password)|base64 -w 0)\"}}}" | base64 -w 0) \
    #     -cloudformationParams "ParameterKey=AppImagePath,ParameterValue=${ECR_REGISTRY}/${ECR_REPO}:latest" \
    #     -ecs-spec-file /root/cloudformation.yaml > cloudformationwithfalcon.yaml
    #     cat cloudformationwithfalcon.yaml
        
    # - name: Create CloudFormation Change Set
    #   run: |
    #     aws cloudformation create-change-set \
    #     --stack-name crowdstrike-ecs-fargate-demo \
    #     --change-set-type CREATE \
    #     --change-set-name "crowdstrike-ecs-fargate-demo-commit-${{ env.GITHUB_SHA }}" \
    #     --template-body file://cloudformationwithfalcon.yaml \
    #     --parameters "ParameterKey=AppImagePath,ParameterValue=${ECR_REGISTRY}/${ECR_REPO}:latest" \
    #     --capabilities CAPABILITY_IAM
